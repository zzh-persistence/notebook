//+------------------------------------------------------------------+
//|                                                      EMA34EA.mq4 |
//|                        Generated by Forex Expert Advisor Builder |
//|                                       Converted to MQL4 by ChatGPT |
//+------------------------------------------------------------------+
#property copyright "ChatGPT"
#property version   "1.00"
#property strict

//--- 输入参数
input int    StopLossPoints = 300;    // 止损点数（300点）
input int    TakeProfitPoints = 1000; // 止盈点数（1000点）
input double RiskPercent = 1.0;      // 风险比例（总净值的10%）

//--- 全局变量
datetime lastConditionTime;  // 记录上一次满足初始条件的时间

//+------------------------------------------------------------------+
//| 专家初始化函数                                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   lastConditionTime = 0;
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| 核心逻辑：每个Tick执行                                           |
//+------------------------------------------------------------------+
void OnTick()
{
//--- 检查是否存在已有订单
   if(OrdersTotal() > 0) return;

//--- 步骤1：检查初始条件（40根K线EMA34不在价格范围内）
   bool initialCondition = CheckInitialCondition();
   
//--- 步骤2：如果满足初始条件
   if(initialCondition)
   {
      double ema34 = iMA(NULL,0,34,0,MODE_EMA,PRICE_CLOSE,0); // 当前EMA34值
      double currentPrice = Close[0];                         // 当前收盘价
      
      //--- 允许1个点的偏差（防止价格跳空）
      if(MathAbs(currentPrice - ema34) <= 1*Point)
      {
         //--- 步骤3：检查价格历史轨迹
         bool priceWasAbove = CheckPriceHistory(ema34, lastConditionTime, true);
         bool priceWasBelow = CheckPriceHistory(ema34, lastConditionTime, false);
         
         //--- 步骤4：确定交易方向
         if(priceWasAbove)
         {
            OpenTrade(OP_BUY, ema34);
            lastConditionTime = 0; // 重置条件时间
         }
         else if(priceWasBelow)
         {
            OpenTrade(OP_SELL, ema34);
            lastConditionTime = 0;
         }
      }
   }
}

//+------------------------------------------------------------------+
//| 检查初始条件：过去40根K线EMA34不在最高价/最低价范围内            |
//+------------------------------------------------------------------+
bool CheckInitialCondition()
{
   for(int i=1; i<=40; i++) // 检查前40根已闭合K线
   {
      double ema = iMA(NULL,0,34,0,MODE_EMA,PRICE_CLOSE,i);
      if(ema > Low[i] && ema < High[i]) return false; // 发现EMA在价格范围内
   }
   lastConditionTime = Time[1]; // 记录满足条件的K线时间（最后闭合的K线）
   return true;
}

//+------------------------------------------------------------------+
//| 检查价格历史轨迹                                                 |
//| 参数：checkAbove=true时检查是否有价格高于EMA                     |
//+------------------------------------------------------------------+
bool CheckPriceHistory(double ema, datetime startTime, bool checkAbove)
{
   int totalBars = Bars;
   for(int i=0; i<totalBars; i++)
   {
      if(Time[i] < startTime) break; // 只检查初始条件后的K线
      double price = Close[i];
      if(checkAbove && price > ema) return true;
      if(!checkAbove && price < ema) return true;
   }
   return false;
}

//+------------------------------------------------------------------+
//| 执行交易操作                                                     |
//+------------------------------------------------------------------+
void OpenTrade(int orderType, double ema)
{
//--- 计算止损止盈价格
   double stopLoss = StopLossPoints * Point;
   double takeProfit = TakeProfitPoints * Point;
   double openPrice = (orderType == OP_BUY) ? Ask : Bid;
   double sl = (orderType == OP_BUY) ? openPrice - stopLoss : openPrice + stopLoss;
   double tp = (orderType == OP_BUY) ? openPrice + takeProfit : openPrice - takeProfit;

//--- 计算手数（基于净值10%的保证金）
   double equity = AccountEquity();
   double marginRequired = equity * RiskPercent / 100.0;
   double contractSize = MarketInfo(Symbol(), MODE_LOTSIZE);
   double leverage = AccountLeverage();
   double lot = (marginRequired * leverage) / (contractSize * openPrice);
   lot = NormalizeDouble(lot, 2);

//--- 调整手数到允许范围
   lot = MathMin(lot, MarketInfo(Symbol(), MODE_MAXLOT));
   lot = MathMax(lot, MarketInfo(Symbol(), MODE_MINLOT));

//--- 发送订单
   int ticket = OrderSend(
      Symbol(),
      orderType,
      lot,
      openPrice,
      3,      // 滑点容限
      sl,
      tp,
      "EMA34 Strategy",
      0,
      CLR_NONE
   );
}